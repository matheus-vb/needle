// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  PRODUCT_MANAGER
  DESIGNER
  DEVELOPER
  QA
  BUSINESS
  DEVOPS
  SALES
  MARKETING
}

enum TaskType {
  DEV
  DESIGN
  PM
  BUSINESS
  DEVOPS
  SALES
  MARKETING
  QA
  GENERAL
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  PENDING
  DONE
  NOT_VISIBLE
}

enum TaskPriority {
  VERY_HIGH
  HIGH
  MEDIUM
  LOW
}

model User {
  id           String           @id @default(uuid())
  name         String
  email        String           @unique
  workspaces   User_Workspace[]
  tasks        Task[]
  deviceToken  String?
  Notification Notification[]
  User_Task    User_Task[]
}

model User_Workspace {
  id          String    @id @default(uuid())
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  userRole    Role
  userId      String
  workspaceId String
}

model Workspace {
  id           String           @id @default(uuid())
  accessCode   String           @unique
  name         String
  tasks        Task[]
  users        User_Workspace[]
  Notification Notification[]
}

model Task {
  id           String       @id @default(uuid())
  title        String
  description  String
  workspace    Workspace    @relation(fields: [workId], references: [id], onDelete: Cascade)
  user         User?        @relation(fields: [userId], references: [id])
  document     Document     @relation(fields: [documentId], references: [id], onDelete: Cascade)
  status       TaskStatus   @default(TODO)
  type         TaskType
  documentId   String       @unique
  endDate      DateTime
  workId       String
  userId       String?
  taskPriority TaskPriority
  TaskTag      TaskTag[]
  created_at   DateTime     @default(now())
  User_Task    User_Task[]
}

model TaskTag {
  id     String @id @default(uuid())
  tag    String
  task   Task   @relation(fields: [taskId], references: [id])
  taskId String
}

model Document {
  id         String  @id @default(uuid())
  title      String
  task       Task?
  text       String
  textString String  @default("")
  author     String?
  type       String
}

model Notification {
  id          String    @id @default(uuid())
  payload     String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String
  created_at  DateTime  @default(now())
}

model User_Task {
  user   User   @relation(fields: [userId], references: [id])
  Task   Task   @relation(fields: [taskId], references: [id])
  userId String
  taskId String

  @@id([userId, taskId])
}
